// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  superadmin
  admin
  user
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?  // Added password field for SuperAdmin
  avatar    String?
  provider  String   // google, github, email
  role      UserRole @default(user)
  isActive  Boolean  @default(true)
  progress  Int      @default(0)

  // Enhanced profile fields
  firstName String?
  lastName  String?
  emailVerified Boolean @default(false)
  phoneNumber String?
  locale    String?  @default("en")
  timezone  String?  @default("UTC")
  preferences String? // JSON string for user preferences
  profileCompleted Boolean @default(false)
  lastLoginAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  userProgress UserProgress[]
  mockInterviews MockInterview[]

  @@map("users")
}

model Problem {
  id          String   @id @default(cuid())
  title       String   @unique
  description String
  difficulty  String
  category    String
  testCases   String   // JSON string
  solution    String?
  hints       String?  // JSON string
  tags        String?  // JSON string
  companies   String?  // JSON string
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  submissions Submission[]
  userProgress UserProgress[]

  @@map("problems")
}

model MCQQuestion {
  id            String   @id @default(cuid())
  question      String   @unique
  options       String   // JSON string
  correctAnswer Int
  explanation   String?
  category      String
  difficulty    String
  tags          String?  // JSON string
  companies     String?  // JSON string
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userProgress UserProgress[]

  @@map("mcq_questions")
}

model Submission {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  code      String
  language  String
  status    String   // accepted, wrong_answer, time_limit, runtime_error
  score     Int
  runtime   Int?     // in milliseconds
  memory    Int?     // in MB
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@map("submissions")
}

model UserProgress {
  id           String   @id @default(cuid())
  userId       String
  problemId    String?
  questionId   String?
  questionType String   // coding, mcq
  status       String   // not_started, in_progress, completed, failed
  score        Int      @default(0)
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  updatedAt    DateTime @updatedAt

  user    User       @relation(fields: [userId], references: [id])
  problem Problem?   @relation(fields: [problemId], references: [id])
  question MCQQuestion? @relation(fields: [questionId], references: [id])

  @@map("user_progress")
}

// Mock Interview System Models
model InterviewTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  duration    Int      // in minutes
  difficulty  String   // easy, medium, hard
  category    String   // frontend, backend, fullstack, ml, etc.
  companies   String?  // JSON string of target companies
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mockInterviews MockInterview[]
  questions     InterviewQuestion[]

  @@map("interview_templates")
}

model MockInterview {
  id                String   @id @default(cuid())
  userId            String
  templateId        String
  status            String   // scheduled, in_progress, completed, cancelled
  scheduledAt       DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  totalScore        Int      @default(0)
  maxScore          Int      @default(0)
  notes             String?  // User's notes during interview
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user     User             @relation(fields: [userId], references: [id])
  template InterviewTemplate @relation(fields: [templateId], references: [id])
  answers  InterviewAnswer[]
  feedback InterviewFeedback?

  @@map("mock_interviews")
}

model InterviewQuestion {
  id           String   @id @default(cuid())
  templateId   String
  questionType String   // coding, mcq, behavioral, system_design
  question     String
  options      String?  // JSON string for MCQ questions
  correctAnswer String? // For MCQ questions
  explanation  String?
  points       Int      @default(10)
  timeLimit    Int?     // in minutes, null for no limit
  order        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  template InterviewTemplate @relation(fields: [templateId], references: [id])
  answers  InterviewAnswer[]

  @@map("interview_questions")
}

model InterviewAnswer {
  id              String   @id @default(cuid())
  interviewId     String
  questionId      String
  answer          String?  // User's answer (code for coding, text for others)
  selectedOption  Int?     // For MCQ questions
  isCorrect       Boolean?
  score           Int      @default(0)
  timeSpent       Int?     // in seconds
  feedback        String?  // Specific feedback for this answer
  createdAt       DateTime @default(now())

  interview MockInterview    @relation(fields: [interviewId], references: [id])
  question  InterviewQuestion @relation(fields: [questionId], references: [id])

  @@map("interview_answers")
}

model InterviewFeedback {
  id          String   @id @default(cuid())
  interviewId String   @unique
  overallScore Int     @default(0)
  technicalScore Int   @default(0)
  communicationScore Int @default(0)
  problemSolvingScore Int @default(0)
  strengths   String?  // JSON string
  weaknesses  String?  // JSON string
  suggestions String?  // JSON string
  detailedFeedback String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  interview MockInterview @relation(fields: [interviewId], references: [id])

  @@map("interview_feedback")
}
