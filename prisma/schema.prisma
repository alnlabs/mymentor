generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  username         String?         @unique
  name             String
  password         String?
  avatar           String?
  provider         String
  role             UserRole        @default(user)
  isActive         Boolean         @default(true)
  progress         Int             @default(0)
  firstName        String?
  lastName         String?
  emailVerified    Boolean         @default(false)
  phoneNumber      String?
  locale           String?         @default("en")
  timezone         String?         @default("UTC")
  preferences      String?
  profileCompleted Boolean         @default(false)
  lastLoginAt      DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isDeleted        Boolean         @default(false)
  deletedAt        DateTime?
  deletedBy        String?
  examResults      ExamResult[]
  examSessions     ExamSession[]
  feedback         Feedback[]
  mockInterviews   MockInterview[]
  submissions      Submission[]
  userProgress     UserProgress[]

  @@map("users")
}

model Problem {
  id              String         @id @default(cuid())
  title           String         @unique
  description     String
  difficulty      String
  category        String
  subject         String?
  topic           String?
  tool            String?
  technologyStack String?
  domain          String?
  skillLevel      String?
  jobRole         String?
  companyType     String?
  interviewType   String?
  testCases       String
  solution        String?
  hints           String?
  tags            String?
  companies       String?
  priority        String?
  status          String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  submissions     Submission[]
  userProgress    UserProgress[]

  @@map("problems")
}

model MCQQuestion {
  id              String         @id @default(cuid())
  question        String         @unique
  options         String
  correctAnswer   Int
  explanation     String?
  category        String
  subject         String?
  topic           String?
  tool            String?
  technologyStack String?
  domain          String?
  skillLevel      String?
  jobRole         String?
  companyType     String?
  interviewType   String?
  difficulty      String
  tags            String?
  companies       String?
  priority        String?
  status          String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userProgress    UserProgress[]

  @@map("mcq_questions")
}

model Submission {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  code      String
  language  String
  status    String
  score     Int
  runtime   Int?
  memory    Int?
  createdAt DateTime @default(now())
  problem   Problem  @relation(fields: [problemId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model UserProgress {
  id           String       @id @default(cuid())
  userId       String
  problemId    String?
  questionId   String?
  questionType String
  status       String
  score        Int          @default(0)
  startedAt    DateTime     @default(now())
  completedAt  DateTime?
  updatedAt    DateTime     @updatedAt
  problem      Problem?     @relation(fields: [problemId], references: [id])
  question     MCQQuestion? @relation(fields: [questionId], references: [id])
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model InterviewTemplate {
  id             String              @id @default(cuid())
  name           String              @unique
  description    String
  duration       Int
  difficulty     String
  category       String
  companies      String?
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  questions      InterviewQuestion[]
  mockInterviews MockInterview[]

  @@map("interview_templates")
}

model MockInterview {
  id          String             @id @default(cuid())
  userId      String
  templateId  String
  status      String
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  totalScore  Int                @default(0)
  maxScore    Int                @default(0)
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  answers     InterviewAnswer[]
  feedback    InterviewFeedback?
  template    InterviewTemplate  @relation(fields: [templateId], references: [id])
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mock_interviews")
}

model InterviewQuestion {
  id            String            @id @default(cuid())
  templateId    String
  questionType  String
  question      String
  options       String?
  correctAnswer String?
  explanation   String?
  points        Int               @default(10)
  timeLimit     Int?
  order         Int               @default(0)
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  answers       InterviewAnswer[]
  template      InterviewTemplate @relation(fields: [templateId], references: [id])

  @@map("interview_questions")
}

model InterviewAnswer {
  id             String            @id @default(cuid())
  interviewId    String
  questionId     String
  answer         String?
  selectedOption Int?
  isCorrect      Boolean?
  score          Int               @default(0)
  timeSpent      Int?
  feedback       String?
  createdAt      DateTime          @default(now())
  interview      MockInterview     @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  question       InterviewQuestion @relation(fields: [questionId], references: [id])

  @@map("interview_answers")
}

model InterviewFeedback {
  id                  String        @id @default(cuid())
  interviewId         String        @unique
  overallScore        Int           @default(0)
  technicalScore      Int           @default(0)
  communicationScore  Int           @default(0)
  problemSolvingScore Int           @default(0)
  strengths           String?
  weaknesses          String?
  suggestions         String?
  detailedFeedback    String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  interview           MockInterview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@map("interview_feedback")
}

model Exam {
  id                   String         @id @default(cuid())
  title                String         @unique
  description          String
  duration             Int
  difficulty           String
  category             String
  targetRole           String?
  questionTypes        String
  totalQuestions       Int            @default(0)
  passingScore         Int            @default(60)
  enableTimedQuestions Boolean        @default(false)
  enableOverallTimer   Boolean        @default(true)
  defaultQuestionTime  Int            @default(120)
  isActive             Boolean        @default(true)
  isPublic             Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  examQuestions        ExamQuestion[]
  examResults          ExamResult[]
  examSessions         ExamSession[]

  @@map("exams")
}

model ExamQuestion {
  id              String               @id @default(cuid())
  examId          String
  questionId      String
  questionType    String
  order           Int                  @default(0)
  points          Int                  @default(10)
  timeLimit       Int?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  questionResults ExamQuestionResult[]
  exam            Exam                 @relation(fields: [examId], references: [id])

  @@map("exam_questions")
}

model ExamResult {
  id          String    @id @default(cuid())
  examId      String
  userId      String
  score       Int       @default(0)
  maxScore    Int       @default(0)
  percentage  Float     @default(0)
  passed      Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  timeSpent   Int?
  answers     String?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  exam        Exam      @relation(fields: [examId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exam_results")
}

model ExamSession {
  id          String               @id @default(cuid())
  examId      String
  userId      String
  startTime   DateTime             @default(now())
  endTime     DateTime?
  timeSpent   Int                  @default(0)
  score       Int?
  status      String               @default("in-progress")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  examResults ExamQuestionResult[]
  exam        Exam                 @relation(fields: [examId], references: [id])
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exam_sessions")
}

model ExamQuestionResult {
  id         String       @id @default(cuid())
  sessionId  String
  questionId String
  userAnswer String?
  isCorrect  Boolean      @default(false)
  points     Int          @default(0)
  timeSpent  Int?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  question   ExamQuestion @relation(fields: [questionId], references: [id])
  session    ExamSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("exam_question_results")
}

model Feedback {
  id          String    @id @default(cuid())
  userId      String
  isAnonymous Boolean   @default(false)
  type        String
  category    String
  subject     String
  message     String
  rating      Int?
  status      String    @default("pending")
  priority    String    @default("medium")
  adminNotes  String?
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feedback")
}

enum UserRole {
  superadmin
  admin
  user
}
