generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  name             String
  password         String?
  avatar           String?
  provider         String
  role             UserRole        @default(user)
  isActive         Boolean         @default(true)
  progress         Int             @default(0)
  firstName        String?
  lastName         String?
  emailVerified    Boolean         @default(false)
  phoneNumber      String?
  locale           String?         @default("en")
  timezone         String?         @default("UTC")
  preferences      String?
  profileCompleted Boolean         @default(false)
  lastLoginAt      DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  mockInterviews   MockInterview[]
  submissions      Submission[]
  userProgress     UserProgress[]
  examResults      ExamResult[]

  @@map("users")
}

model Problem {
  id               String         @id @default(cuid())
  title            String         @unique
  description      String
  difficulty       String
  category         String
  subject          String?
  topic            String?
  tool             String?
  technologyStack  String?
  domain           String?
  skillLevel       String?
  jobRole          String?
  companyType      String?
  interviewType    String?
  testCases        String
  solution         String?
  hints            String?
  tags             String?
  companies        String?
  priority         String?
  status           String?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  submissions      Submission[]
  userProgress     UserProgress[]

  @@map("problems")
}

model MCQQuestion {
  id               String         @id @default(cuid())
  question         String         @unique
  options          String
  correctAnswer    Int
  explanation      String?
  category         String
  subject          String?
  topic            String?
  tool             String?
  technologyStack  String?
  domain           String?
  skillLevel       String?
  jobRole          String?
  companyType      String?
  interviewType    String?
  difficulty       String
  tags             String?
  companies        String?
  priority         String?
  status           String?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userProgress     UserProgress[]

  @@map("mcq_questions")
}

model Submission {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  code      String
  language  String
  status    String
  score     Int
  runtime   Int?
  memory    Int?
  createdAt DateTime @default(now())
  problem   Problem  @relation(fields: [problemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("submissions")
}

model UserProgress {
  id           String       @id @default(cuid())
  userId       String
  problemId    String?
  questionId   String?
  questionType String
  status       String
  score        Int          @default(0)
  startedAt    DateTime     @default(now())
  completedAt  DateTime?
  updatedAt    DateTime     @updatedAt
  question     MCQQuestion? @relation(fields: [questionId], references: [id])
  problem      Problem?     @relation(fields: [problemId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("user_progress")
}

model InterviewTemplate {
  id             String              @id @default(cuid())
  name           String              @unique
  description    String
  duration       Int
  difficulty     String
  category       String
  companies      String?
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  questions      InterviewQuestion[]
  mockInterviews MockInterview[]

  @@map("interview_templates")
}

model MockInterview {
  id          String             @id @default(cuid())
  userId      String
  templateId  String
  status      String
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  totalScore  Int                @default(0)
  maxScore    Int                @default(0)
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  answers     InterviewAnswer[]
  feedback    InterviewFeedback?
  template    InterviewTemplate  @relation(fields: [templateId], references: [id])
  user        User               @relation(fields: [userId], references: [id])

  @@map("mock_interviews")
}

model InterviewQuestion {
  id            String            @id @default(cuid())
  templateId    String
  questionType  String
  question      String
  options       String?
  correctAnswer String?
  explanation   String?
  points        Int               @default(10)
  timeLimit     Int?
  order         Int               @default(0)
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  answers       InterviewAnswer[]
  template      InterviewTemplate @relation(fields: [templateId], references: [id])

  @@map("interview_questions")
}

model InterviewAnswer {
  id             String            @id @default(cuid())
  interviewId    String
  questionId     String
  answer         String?
  selectedOption Int?
  isCorrect      Boolean?
  score          Int               @default(0)
  timeSpent      Int?
  feedback       String?
  createdAt      DateTime          @default(now())
  question       InterviewQuestion @relation(fields: [questionId], references: [id])
  interview      MockInterview     @relation(fields: [interviewId], references: [id])

  @@map("interview_answers")
}

model InterviewFeedback {
  id                  String        @id @default(cuid())
  interviewId         String        @unique
  overallScore        Int           @default(0)
  technicalScore      Int           @default(0)
  communicationScore  Int           @default(0)
  problemSolvingScore Int           @default(0)
  strengths           String?
  weaknesses          String?
  suggestions         String?
  detailedFeedback    String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  interview           MockInterview @relation(fields: [interviewId], references: [id])

  @@map("interview_feedback")
}

model Exam {
  id              String       @id @default(cuid())
  title           String       @unique
  description     String
  duration        Int          // Duration in minutes
  difficulty      String       // Easy, Medium, Hard
  category        String       // Programming, Data Structures, etc.
  targetRole      String?      // Frontend, Backend, Full Stack, etc.
  questionTypes   String       // MCQ, Coding, Mixed
  totalQuestions  Int          @default(0)
  passingScore    Int          @default(60) // Percentage
  isActive        Boolean      @default(true)
  isPublic        Boolean      @default(true) // Public or private exam
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  examQuestions   ExamQuestion[]
  examResults     ExamResult[]

  @@map("exams")
}

model ExamQuestion {
  id           String   @id @default(cuid())
  examId       String
  questionId   String
  questionType String   // MCQ or Problem
  order        Int      @default(0)
  points       Int      @default(10)
  timeLimit    Int?     // Time limit in seconds for this specific question
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  exam         Exam     @relation(fields: [examId], references: [id])

  @@map("exam_questions")
}

model ExamResult {
  id           String   @id @default(cuid())
  examId       String
  userId       String
  score        Int      @default(0)
  maxScore     Int      @default(0)
  percentage   Float    @default(0)
  passed       Boolean  @default(false)
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  timeSpent    Int?     // Time spent in minutes
  answers      String?  // JSON string of answers with individual question timing
  feedback     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  exam         Exam     @relation(fields: [examId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@map("exam_results")
}

enum UserRole {
  superadmin
  admin
  user
}
