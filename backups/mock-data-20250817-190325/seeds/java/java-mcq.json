{
  "language": "Java",
  "category": "Java",
  "concepts": [
    {
      "name": "Basic Syntax & Variables",
      "difficulty": "beginner",
      "questions": [
        {
          "id": "java_basic_001",
          "question": "Which of the following is the correct way to declare a variable in Java?",
          "options": [
            "var x = 10;",
            "int x = 10;",
            "variable x = 10;",
            "let x = 10;"
          ],
          "correctAnswer": "int x = 10;",
          "explanation": "In Java, variables must be declared with their data type. 'int' is the correct keyword for integer variables.",
          "tags": [
            "variables",
            "syntax",
            "data-types"
          ],
          "companies": [
            "Google",
            "Amazon",
            "Microsoft"
          ],
          "difficulty": "beginner"
        },
        {
          "id": "java_basic_002",
          "question": "What is the default value of an int variable in Java?",
          "options": [
            "null",
            "0",
            "undefined",
            "1"
          ],
          "correctAnswer": "0",
          "explanation": "In Java, primitive data types have default values. For int, the default value is 0.",
          "tags": [
            "variables",
            "default-values",
            "primitives"
          ],
          "companies": [
            "Oracle",
            "IBM",
            "Netflix"
          ],
          "difficulty": "beginner"
        },
        {
          "id": "java_basic_003",
          "question": "Which keyword is used to declare a constant in Java?",
          "options": [
            "const",
            "final",
            "static",
            "constant"
          ],
          "correctAnswer": "final",
          "explanation": "The 'final' keyword is used to declare constants in Java. Once assigned, a final variable cannot be changed.",
          "tags": [
            "constants",
            "final",
            "immutability"
          ],
          "companies": [
            "Google",
            "Amazon",
            "Facebook"
          ],
          "difficulty": "beginner"
        }
      ]
    },
    {
      "name": "Control Structures",
      "difficulty": "beginner",
      "questions": [
        {
          "id": "java_control_001",
          "question": "Which loop is best suited when you know the number of iterations in advance?",
          "options": [
            "while loop",
            "for loop",
            "do-while loop",
            "foreach loop"
          ],
          "correctAnswer": "for loop",
          "explanation": "The for loop is ideal when you know the exact number of iterations, as it has initialization, condition, and increment/decrement in one line.",
          "tags": [
            "loops",
            "control-flow",
            "iteration"
          ],
          "companies": [
            "Microsoft",
            "Apple",
            "Uber"
          ],
          "difficulty": "beginner"
        },
        {
          "id": "java_control_002",
          "question": "What is the difference between '==' and '.equals()' in Java?",
          "options": [
            "There is no difference",
            "'==' compares references, '.equals()' compares content",
            "'==' compares content, '.equals()' compares references",
            "Both compare references"
          ],
          "correctAnswer": "'==' compares references, '.equals()' compares content",
          "explanation": "'==' checks if two objects point to the same memory location, while '.equals()' compares the actual content of the objects.",
          "tags": [
            "comparison",
            "equals",
            "references"
          ],
          "companies": [
            "Google",
            "Amazon",
            "LinkedIn"
          ],
          "difficulty": "beginner"
        },
        {
          "id": "java_control_003",
          "question": "Which statement is used to exit a loop early?",
          "options": [
            "exit",
            "break",
            "continue",
            "return"
          ],
          "correctAnswer": "break",
          "explanation": "The 'break' statement is used to exit a loop or switch statement early, while 'continue' skips the current iteration.",
          "tags": [
            "control-flow",
            "break",
            "loops"
          ],
          "companies": [
            "Oracle",
            "IBM",
            "Netflix"
          ],
          "difficulty": "beginner"
        }
      ]
    },
    {
      "name": "Object-Oriented Programming",
      "difficulty": "intermediate",
      "questions": [
        {
          "id": "java_oop_001",
          "question": "What is the difference between method overloading and method overriding?",
          "options": [
            "Overloading is in same class, overriding is in different classes",
            "Overriding is in same class, overloading is in different classes",
            "Both are the same concept",
            "Overloading is for constructors only"
          ],
          "correctAnswer": "Overloading is in same class, overriding is in different classes",
          "explanation": "Method overloading occurs within the same class with different parameters, while overriding occurs in a subclass with the same signature as the parent class.",
          "tags": [
            "oop",
            "overloading",
            "overriding",
            "polymorphism"
          ],
          "companies": [
            "Google",
            "Amazon",
            "Microsoft"
          ],
          "difficulty": "intermediate"
        },
        {
          "id": "java_oop_002",
          "question": "Which access modifier provides the most restrictive access?",
          "options": [
            "public",
            "protected",
            "default (package-private)",
            "private"
          ],
          "correctAnswer": "private",
          "explanation": "Private provides the most restrictive access - only accessible within the same class. The order from most to least restrictive is: private, default, protected, public.",
          "tags": [
            "access-modifiers",
            "encapsulation",
            "visibility"
          ],
          "companies": [
            "Oracle",
            "IBM",
            "Facebook"
          ],
          "difficulty": "intermediate"
        },
        {
          "id": "java_oop_003",
          "question": "What is the purpose of the 'super' keyword in Java?",
          "options": [
            "To call the parent class constructor or methods",
            "To create a new object",
            "To define a static method",
            "To declare an interface"
          ],
          "correctAnswer": "To call the parent class constructor or methods",
          "explanation": "The 'super' keyword is used to call the parent class constructor or access parent class methods and variables from a subclass.",
          "tags": [
            "inheritance",
            "super",
            "parent-class"
          ],
          "companies": [
            "Google",
            "Amazon",
            "LinkedIn"
          ],
          "difficulty": "intermediate"
        }
      ]
    },
    {
      "name": "Collections Framework",
      "difficulty": "intermediate",
      "questions": [
        {
          "id": "java_collections_001",
          "question": "Which collection maintains insertion order and allows duplicates?",
          "options": [
            "HashSet",
            "TreeSet",
            "ArrayList",
            "HashMap"
          ],
          "correctAnswer": "ArrayList",
          "explanation": "ArrayList maintains insertion order and allows duplicate elements. HashSet and TreeSet don't maintain order, and HashMap is a map, not a list.",
          "tags": [
            "collections",
            "arraylist",
            "order",
            "duplicates"
          ],
          "companies": [
            "Microsoft",
            "Apple",
            "Uber"
          ],
          "difficulty": "intermediate"
        },
        {
          "id": "java_collections_002",
          "question": "What is the difference between HashMap and TreeMap?",
          "options": [
            "HashMap is ordered, TreeMap is unordered",
            "TreeMap is ordered, HashMap is unordered",
            "Both are unordered",
            "Both are ordered"
          ],
          "correctAnswer": "TreeMap is ordered, HashMap is unordered",
          "explanation": "TreeMap maintains keys in sorted order (natural ordering or custom comparator), while HashMap does not guarantee any order.",
          "tags": [
            "collections",
            "hashmap",
            "treemap",
            "ordering"
          ],
          "companies": [
            "Google",
            "Amazon",
            "Netflix"
          ],
          "difficulty": "intermediate"
        },
        {
          "id": "java_collections_003",
          "question": "Which interface should you use if you need a thread-safe collection?",
          "options": [
            "List",
            "Set",
            "Map",
            "ConcurrentHashMap"
          ],
          "correctAnswer": "ConcurrentHashMap",
          "explanation": "ConcurrentHashMap is specifically designed for thread-safe operations. Regular HashMap, List, and Set are not thread-safe by default.",
          "tags": [
            "collections",
            "thread-safety",
            "concurrent",
            "multithreading"
          ],
          "companies": [
            "Oracle",
            "IBM",
            "Facebook"
          ],
          "difficulty": "intermediate"
        }
      ]
    },
    {
      "name": "Exception Handling",
      "difficulty": "intermediate",
      "questions": [
        {
          "id": "java_exception_001",
          "question": "What is the difference between checked and unchecked exceptions?",
          "options": [
            "Checked exceptions must be handled, unchecked don't",
            "Unchecked exceptions must be handled, checked don't",
            "Both must be handled",
            "Neither must be handled"
          ],
          "correctAnswer": "Checked exceptions must be handled, unchecked don't",
          "explanation": "Checked exceptions (like IOException) must be either caught or declared in the method signature, while unchecked exceptions (like RuntimeException) don't require explicit handling.",
          "tags": [
            "exceptions",
            "checked",
            "unchecked",
            "error-handling"
          ],
          "companies": [
            "Google",
            "Amazon",
            "Microsoft"
          ],
          "difficulty": "intermediate"
        },
        {
          "id": "java_exception_002",
          "question": "What happens if an exception is thrown in a finally block?",
          "options": [
            "The finally block exception is ignored",
            "The finally block exception overrides any previous exception",
            "Both exceptions are preserved",
            "The program crashes"
          ],
          "correctAnswer": "The finally block exception overrides any previous exception",
          "explanation": "If an exception occurs in a finally block, it will override any exception that was thrown in the try or catch blocks.",
          "tags": [
            "exceptions",
            "finally",
            "exception-handling"
          ],
          "companies": [
            "Oracle",
            "IBM",
            "LinkedIn"
          ],
          "difficulty": "intermediate"
        },
        {
          "id": "java_exception_003",
          "question": "Which exception is thrown when trying to access an array with an invalid index?",
          "options": [
            "NullPointerException",
            "ArrayIndexOutOfBoundsException",
            "IndexOutOfBoundsException",
            "IllegalArgumentException"
          ],
          "correctAnswer": "ArrayIndexOutOfBoundsException",
          "explanation": "ArrayIndexOutOfBoundsException is thrown when trying to access an array element with an index that is negative or greater than or equal to the array length.",
          "tags": [
            "exceptions",
            "arrays",
            "index",
            "bounds"
          ],
          "companies": [
            "Microsoft",
            "Apple",
            "Uber"
          ],
          "difficulty": "intermediate"
        }
      ]
    },
    {
      "name": "Multithreading",
      "difficulty": "advanced",
      "questions": [
        {
          "id": "java_threading_001",
          "question": "What is the difference between Thread and Runnable?",
          "options": [
            "Thread is an interface, Runnable is a class",
            "Runnable is an interface, Thread is a class",
            "Both are interfaces",
            "Both are classes"
          ],
          "correctAnswer": "Runnable is an interface, Thread is a class",
          "explanation": "Runnable is a functional interface that defines a single method run(), while Thread is a class that can be extended to create a new thread.",
          "tags": [
            "multithreading",
            "thread",
            "runnable",
            "concurrency"
          ],
          "companies": [
            "Google",
            "Amazon",
            "Netflix"
          ],
          "difficulty": "advanced"
        },
        {
          "id": "java_threading_002",
          "question": "What is the purpose of the 'synchronized' keyword?",
          "options": [
            "To make a method run faster",
            "To prevent multiple threads from accessing a method simultaneously",
            "To create a new thread",
            "To stop a thread"
          ],
          "correctAnswer": "To prevent multiple threads from accessing a method simultaneously",
          "explanation": "The synchronized keyword ensures that only one thread can execute a method or block at a time, preventing race conditions and data inconsistency.",
          "tags": [
            "multithreading",
            "synchronization",
            "thread-safety",
            "race-conditions"
          ],
          "companies": [
            "Oracle",
            "IBM",
            "Facebook"
          ],
          "difficulty": "advanced"
        },
        {
          "id": "java_threading_003",
          "question": "What is a deadlock in multithreading?",
          "options": [
            "When a thread finishes execution",
            "When two or more threads are waiting for each other to release resources",
            "When a thread is sleeping",
            "When a thread is interrupted"
          ],
          "correctAnswer": "When two or more threads are waiting for each other to release resources",
          "explanation": "A deadlock occurs when two or more threads are blocked forever, each waiting for the other to release a resource that it holds.",
          "tags": [
            "multithreading",
            "deadlock",
            "concurrency",
            "threading"
          ],
          "companies": [
            "Google",
            "Amazon",
            "Microsoft"
          ],
          "difficulty": "advanced"
        }
      ]
    }
  ]
}