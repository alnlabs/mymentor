{
  "language": "JavaScript",
  "category": "JavaScript",
  "concepts": [
    {
      "name": "Advanced ES6+ Features",
      "difficulty": "hard",
      "questions": [
        {
          "id": "js-generators",
          "question": "What is a generator function in JavaScript?",
          "options": [
            "A function that generates random numbers",
            "A function that can be paused and resumed using yield",
            "A function that creates other functions",
            "A function that runs in the background"
          ],
          "correctAnswer": "A function that can be paused and resumed using yield",
          "explanation": "Generator functions use the function* syntax and can be paused and resumed using the yield keyword, allowing for more control over execution flow.",
          "tags": ["generators", "es6", "async"],
          "companies": ["Google", "Facebook", "Netflix"],
          "difficulty": "hard"
        },
        {
          "id": "js-proxy",
          "question": "What is a Proxy in JavaScript?",
          "options": [
            "A way to make HTTP requests",
            "An object that wraps another object and intercepts operations",
            "A type of function",
            "A way to create classes"
          ],
          "correctAnswer": "An object that wraps another object and intercepts operations",
          "explanation": "A Proxy object wraps another object and can intercept and customize operations like property lookup, assignment, enumeration, function invocation, etc.",
          "tags": ["proxy", "es6", "metaprogramming"],
          "companies": ["Google", "Microsoft", "Amazon"],
          "difficulty": "hard"
        },
        {
          "id": "js-symbols",
          "question": "What is a Symbol in JavaScript?",
          "options": [
            "A mathematical symbol",
            "A primitive type that creates unique identifiers",
            "A type of string",
            "A way to create objects"
          ],
          "correctAnswer": "A primitive type that creates unique identifiers",
          "explanation": "Symbols are primitive values that are guaranteed to be unique. They are often used as property keys to avoid name collisions.",
          "tags": ["symbols", "es6", "primitives"],
          "companies": ["Facebook", "Netflix", "Uber"],
          "difficulty": "medium"
        }
      ]
    },
    {
      "name": "Functional Programming",
      "difficulty": "hard",
      "questions": [
        {
          "id": "js-currying",
          "question": "What is currying in functional programming?",
          "options": [
            "A way to cook food",
            "A technique of evaluating a function with multiple arguments into a sequence of functions with single arguments",
            "A type of loop",
            "A way to create objects"
          ],
          "correctAnswer": "A technique of evaluating a function with multiple arguments into a sequence of functions with single arguments",
          "explanation": "Currying is a technique where a function that takes multiple arguments is transformed into a sequence of functions that each take a single argument.",
          "tags": ["currying", "functional-programming", "closures"],
          "companies": ["Google", "Facebook", "Amazon"],
          "difficulty": "hard"
        },
        {
          "id": "js-composition",
          "question": "What is function composition?",
          "options": [
            "A way to write music",
            "Combining multiple functions to create a new function",
            "A type of inheritance",
            "A way to create classes"
          ],
          "correctAnswer": "Combining multiple functions to create a new function",
          "explanation": "Function composition is the process of combining two or more functions to produce a new function. The output of one function becomes the input of the next.",
          "tags": ["composition", "functional-programming", "functions"],
          "companies": ["Netflix", "Uber", "Airbnb"],
          "difficulty": "medium"
        }
      ]
    },
    {
      "name": "Memory Management",
      "difficulty": "hard",
      "questions": [
        {
          "id": "js-memory-leaks",
          "question": "What is a memory leak in JavaScript?",
          "options": [
            "When memory is physically damaged",
            "When memory that is no longer needed is not released",
            "When the browser crashes",
            "When code runs too slowly"
          ],
          "correctAnswer": "When memory that is no longer needed is not released",
          "explanation": "A memory leak occurs when memory that is no longer needed by the application is not released back to the system, causing the application to consume more and more memory over time.",
          "tags": ["memory-leaks", "performance", "garbage-collection"],
          "companies": ["Google", "Facebook", "Microsoft"],
          "difficulty": "hard"
        },
        {
          "id": "js-garbage-collection",
          "question": "How does garbage collection work in JavaScript?",
          "options": [
            "It manually deletes variables",
            "It automatically removes objects that are no longer referenced",
            "It compresses memory",
            "It optimizes code"
          ],
          "correctAnswer": "It automatically removes objects that are no longer referenced",
          "explanation": "JavaScript's garbage collector automatically identifies and removes objects that are no longer reachable or referenced by the application, freeing up memory.",
          "tags": ["garbage-collection", "memory", "performance"],
          "companies": ["Google", "Microsoft", "Apple"],
          "difficulty": "medium"
        }
      ]
    }
  ]
}
