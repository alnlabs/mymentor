[
  {
    "id": "two-sum",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "difficulty": "easy",
    "category": "arrays",
    "testCases": "[{\"input\": \"[2,7,11,15], 9\", \"output\": \"[0,1]\"}, {\"input\": \"[3,2,4], 6\", \"output\": \"[1,2]\"}, {\"input\": \"[3,3], 6\", \"output\": \"[0,1]\"}]",
    "solution": "Use a hash map to store complements. For each number, check if its complement exists in the map.",
    "hints": "[\"Try using a hash map\", \"Think about complement pairs\"]",
    "tags": "[\"arrays\", \"hash-table\"]",
    "companies": "[\"Google\", \"Amazon\", \"Microsoft\"]"
  },
  {
    "id": "reverse-string",
    "title": "Reverse String",
    "description": "Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.",
    "difficulty": "easy",
    "category": "strings",
    "testCases": "[{\"input\": \"['h','e','l','l','o']\", \"output\": \"['o','l','l','e','h']\"}, {\"input\": \"['H','a','n','n','a','h']\", \"output\": \"['h','a','n','n','a','H']\"}]",
    "solution": "Use two pointers approach. Swap characters from both ends until pointers meet in the middle.",
    "hints": "[\"Use two pointers\", \"Swap from both ends\"]",
    "tags": "[\"strings\", \"two-pointers\"]",
    "companies": "[\"Microsoft\", \"Apple\"]"
  },
  {
    "id": "valid-parentheses",
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1) Open brackets must be closed by the same type of brackets. 2) Open brackets must be closed in the correct order.",
    "difficulty": "easy",
    "category": "stacks",
    "testCases": "[{\"input\": \"()\", \"output\": \"true\"}, {\"input\": \"()[]{}\", \"output\": \"true\"}, {\"input\": \"(]\", \"output\": \"false\"}]",
    "solution": "Use a stack to keep track of opening brackets. For each closing bracket, check if it matches the top of the stack.",
    "hints": "[\"Use a stack\", \"Check for matching pairs\"]",
    "tags": "[\"stack\", \"string\"]",
    "companies": "[\"Google\", \"Facebook\", \"Amazon\"]"
  },
  {
    "id": "palindrome-check",
    "title": "Palindrome Number",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
    "difficulty": "easy",
    "category": "math",
    "testCases": "[{\"input\": \"121\", \"output\": \"true\"}, {\"input\": \"-121\", \"output\": \"false\"}, {\"input\": \"10\", \"output\": \"false\"}]",
    "solution": "Convert to string and check if it reads the same forwards and backwards, or use mathematical approach to reverse the number.",
    "hints": "[\"Convert to string\", \"Use two pointers\"]",
    "tags": "[\"math\", \"palindrome\"]",
    "companies": "[\"Microsoft\", \"Apple\"]"
  },
  {
    "id": "missing-number",
    "title": "Missing Number",
    "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
    "difficulty": "easy",
    "category": "arrays",
    "testCases": "[{\"input\": \"[3,0,1]\", \"output\": \"2\"}, {\"input\": \"[0,1]\", \"output\": \"2\"}, {\"input\": \"[9,6,4,2,3,5,7,0,1]\", \"output\": \"8\"}]",
    "solution": "Use mathematical approach: sum of first n numbers minus sum of array, or use XOR approach.",
    "hints": "[\"Use mathematical sum\", \"Try XOR approach\"]",
    "tags": "[\"arrays\", \"math\", \"bit-manipulation\"]",
    "companies": "[\"Google\", \"Amazon\"]"
  }
]
